@page "/"
@using System.Globalization
@inherits CalendarCore
@inject EventsSource data_repository

<PageTitle>Календарь</PageTitle>

<style>
    .center-pos {
        align-items: center;
        justify-content: center;
    }
</style>

@{
    MonthStarted = new DateTime(MonthStarted.Year, MonthStarted.Month, 1);
    int firstday_in_week = (int)MonthStarted.DayOfWeek;

    DayInMonthState = DayInMonthPosition.DayInMonthBefore;
    DateTime MonthEnded = new DateTime(MonthStarted.Year, MonthStarted.Month, 1).AddMonths(1);
    DateTime DayCounter = MonthStarted;
    string? style_background = null;
    int Offset = 0;

    if (EventsCollection != null)
    {
        EventsCollection = EventsCollection.OrderBy(p => p.Event_DateStart).ThenByDescending(p => p.Event_DateEnd).ToList();
    }


}

<Form Model="@model">

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <div class="d-flex flex-row mb-5 center-pos">
        <div class="btn-toolbar">
            <div class="row align-items-center justify-content-center">

                <div class="btn-group me-2">
                    <button type="button" class="btn btn-outline-primary" @onclick=@Handler_ClickOnMonthToday>Сегодня</button>
                </div>

                <div class="btn-group me-2">
                    <button type="button" class="btn btn-outline-primary" @onclick=@Handler_ClickOnMonthBefore>&#8592;</button>
                </div>

                <div class="btn-group me-2">
                    <DatepickerControl @bind-Value=current_date></DatepickerControl>
                </div>

                <div class="btn-group me-2">
                    <button type="button" class="btn btn-outline-primary" @onclick=@Handler_ClickOnNextMonth>&#8594;</button>
                </div>

                <div class="btn-group me-2">
                    <button type="button" class="btn btn-outline-primary" @onclick=@DraggableButtonClickInterpreter>

                        @if (IsDraggable)
                        {
                            <address>Выключить перемещение событий</address>
                        }
                        else
                        {
                            <address>Включить перемещение событий</address>
                        }
                    </button>

                </div>
            </div>
        </div>
    </div>


    @if (modalOpened)
    {
        <Calendar_VK_MyGames.Components.CalendarModal ViewModel=@modal_model Event_ID=@modal_event_id EventDate=@modal_date CallingEvent=@modal_cmce OnClose=@CloseModal OnKilling=@Modal_KillEvent OnSaving=@Modal_SaveEvent/>
    }

    @if (ready)
    {
        <div class="monthly-calendar">

            @for (var i = 0; i < 7; i++)
            {
                int d = LocaleAdapter.NumDateConverter(i);
                <span class="header-name noselect">
                    @weekdays_short[d]
                </span>
            }
            }

            @for (int i = 0; i < 40; i++)
            {
                if (DayInMonthState == DayInMonthPosition.DayInMonthBefore) // First empty cells part
                {
                    if ((int)MonthStarted.DayOfWeek == LocaleAdapter.NumDateConverter(i))  // Cell is first day?
                    {
                        DayInMonthState = DayInMonthPosition.DayInCurrentMonth; // Start filling days
                        var dayClick = DayCounter;
                        style_background = DayColoring(dayClick);
                        <div class="fade-in monthly-day noselect" style="@style_background" ondragover="event.preventDefault();" @onclick="e => ClickDay(e, dayClick)" @ondrop="() => HandleDayOnDrop(dayClick)">
                            @(DayCounter.Day.ToString())
                        </div>
                        DayCounter = DayCounter.AddDays(1);
                        Offset = i;
                    }
                    else
                    {
                        <div class="monthly-day fader cursor-top" @onclick="Handler_ClickOnMonthBefore"></div>
                    }
                }
                if (DayInMonthState == DayInMonthPosition.DayInCurrentMonth)
                {
                    if (DayCounter >= MonthEnded) // Stop at last day
                    {
                        DayInMonthState = DayInMonthPosition.DayInNextMonth;
                        // Again empty cells from here on
                        <div class="monthly-day fader cursor-bottom" @onclick="Handler_ClickOnNextMonth"></div>
                    }
                    else
                    {
                        var _dayClick = DayCounter;
                        style_background = DayColoring(_dayClick);
                        <div class="fade-in monthly-day noselect" style="@style_background" ondragover="event.preventDefault();" @onclick="e => ClickDay(e, _dayClick)" @ondrop="() => HandleDayOnDrop(_dayClick)">
                            @(DayCounter.Day.ToString())
                        </div>
                        DayCounter = DayCounter.AddDays(1);
                    }
                }
                if (DayInMonthState == DayInMonthPosition.DayInNextMonth)
                {
                    <div class="monthly-day fader cursor-bottom" @onclick="Handler_ClickOnNextMonth"></div>
                }
            }


            @if (EventsCollection != null)
            {
                Positioner[] ev_positions = new Positioner[32];

                for (int i = 0; i < 32; ++i)
                {
                    ev_positions[i] = new Positioner();
                }

                @foreach (EventBody ev_b in EventsCollection)
                {
                    if ((ev_b.Event_DateStart.Date <= MonthStarted && MonthStarted <= ev_b.Event_DateEnd.Date) || (ev_b.Event_DateStart.Date > MonthStarted && MonthEnded > ev_b.Event_DateEnd.Date) || (ev_b.Event_DateStart < MonthEnded && MonthEnded <= ev_b.Event_DateEnd.Date))
                    {

                        DateTime Event_Start = new DateTime();
                        if (ev_b.Event_DateStart.Date < MonthStarted)
                        {
                            Event_Start = MonthStarted;
                        }
                        else
                        {
                            Event_Start = ev_b.Event_DateStart.Date;
                        }

                        DateTime Event_End = new DateTime();
                        if (ev_b.Event_DateEnd.Date >= MonthEnded)
                        {
                            Event_End = MonthEnded.AddDays(-1);
                        }
                        else
                        {
                            Event_End = ev_b.Event_DateEnd.Date;
                        }

                        int event_pos_x = (Event_Start.Day + Offset - 1) % 7 + 1;
                        int event_pos_y = (Event_Start.Day + Offset - 1) / 7 + 2;
                        int event_length = (int)(Event_End.Date - Event_Start.Date).TotalDays + 1;

                        string css_event_positioner = null;

                        var ev_current_position = ev_positions[Event_Start.Day];

                        if (ev_current_position.Top == false)
                        {
                            for (int i = Event_Start.Day; i < Event_Start.Day + event_length; ++i)
                            {
                                ev_positions[i].Top = true;
                            }
                            css_event_positioner = "monthly-event-first";
                        }
                        else if (ev_current_position.Center== false)
                        {
                            for (int i = Event_Start.Day; i < Event_Start.Day + event_length; ++i)
                            {
                                ev_positions[i].Top = true;
                            }
                            css_event_positioner = "monthly-event-second";
                        }

                        string borders = "border-start";

                        bool multiple_lines = true;

                        while (multiple_lines)
                        {
                            string row_css = $"grid-column:{event_pos_x} / span {event_length}; grid-row:{event_pos_y};";

                            if (css_event_positioner != null)
                            {
                                <div class="fade-in monthly-event @borders cursor-pointer @css_event_positioner"
                                        style="@row_css @("background:" + @ev_b.Event_Color + ";color:"+ @ev_b.Event_ForeColor)"
                                        title="@ev_b.Event_Comment"
                                        draggable="@getDragabbleStatus()"
                                        @onclick="e => Click_Event(e, ev_b.Event_ID)"
                                        @ondragstart="() => Handler_DragStart(ev_b.Event_ID)">

                                    @if (ev_b.Event_DateStart.Hour + ev_b.Event_DateStart.Minute > 0 || ev_b.Event_isAllDay == false)
                                    {
                                        @(ev_b.Event_DateStart.ToString("t") + " : " + @ev_b.Event_Comment)
                                    }
                                    else
                                    {
                                        @ev_b.Event_Comment
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="fade-in monthly-more-event noselect"
                                     style=@($"grid-column:{event_pos_x} / span 1; grid-row:{event_pos_y}; @row_css @DayColoring(Event_Start)")
                                     @onclick="e => Click_AllDay(e, Event_Start)">
                                    @($"+ {ev_positions[Event_Start.Day].Counter-1} ...")
                                </div>
                            }
                            multiple_lines = false;

                            if (event_pos_x + event_length > 8)
                            {
                                multiple_lines = true;

                                Event_Start = Event_Start.AddDays(8 - event_pos_x);

                                if (ev_b.Event_DateEnd.Date >= MonthEnded)
                                {
                                    Event_End = MonthEnded.AddDays(-1);
                                }
                                else
                                {
                                    Event_End = ev_b.Event_DateEnd.Date;
                                }

                                event_pos_x = (Event_Start.Day + Offset - 1) % 7 + 1;
                                event_pos_y = (Event_Start.Day + Offset - 1) / 7 + 2;
                                event_length = (int)(Event_End.Date - Event_Start.Date).TotalDays + 1;

                                borders = "";
                            }


                        }


                        if (ev_b.Event_DateStart.Date < MonthStarted)
                        {
                            Event_Start = MonthStarted;
                        }
                        else
                        {
                            Event_Start = ev_b.Event_DateStart.Date;
                        }

                         if (ev_b.Event_DateEnd.Date >= MonthEnded)
                        {
                            Event_End = MonthEnded.AddDays(-1);
                        }
                        else
                        {
                            Event_End = ev_b.Event_DateEnd.Date;
                        }


                for (var day = Event_Start.Day; day <= Event_End.Day; day++)
                {     
                    ev_positions[day].Counter++;
                }



                    }
                }
            }


        </div>
    }
</Form>




@code {

    private bool modalOpened = false;
    private DateTime _MonthStarted;
    public DateTime MonthStarted
    {
        get
        {
            if (_MonthStarted == DateTime.MinValue) _MonthStarted = DateTime.Today;
            return _MonthStarted.Date;
        }
        set
        {
            _MonthStarted = value;
        }
    }

    DateTime modal_date = new DateTime();
    int modal_event_id = 0;
    CalendarModalCallingEvents modal_cmce = CalendarModalCallingEvents.Create;
    EventBody modal_model;

    bool ready = false;

    public void OpenModal()
    {
        modalOpened = true;
        StateHasChanged();
    }

    public void CloseModal()
    {
        modalOpened = false;
        StateHasChanged();
    }

    FormModel model = new FormModel();
    DayInMonthPosition DayInMonthState = DayInMonthPosition.DayInMonthBefore;

    public class FormModel
    {
        public bool isDraggable { get; set; }
    }

    public DateTime _current_date;

    public DateTime current_date
    {
        get
        {
            if (_current_date == DateTime.MinValue) _current_date = DateTime.Today;
            return _current_date.Date;
        }
        set
        {
            _current_date = value;
            MonthStarted = new DateTime(_current_date.Year, _current_date.Month, 1);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {

        current_date = DateTime.Now;
        ChangeDate(DateTime.Now.ToShortDateString());
        EventsCollection = data_repository.GetEventsExamples();

        ready = true;
        StateHasChanged();
    }

    private string getDragabbleStatus()
    {
        return IsDraggable.ToString();
    }

    private void ChangeDate(string new_date)
    {
        DateTime dt_conv = DateTime.Parse(new_date);
    }

    private void Handler_ClickOnNextMonth()
    {
        current_date = current_date.AddMonths(1);
        StateHasChanged();
        // MonthStarted =  MonthStarted.AddMonths(1);
    }

    private void Handler_ClickOnMonthBefore()
    {
        current_date = current_date.AddMonths(-1);
        StateHasChanged();
        //MonthStarted = MonthStarted.AddMonths(-1);
    }

    private void Handler_ClickOnMonthToday()
    {
        DateTime today = DateTime.Today;
        current_date = new DateTime(today.Year, today.Month, 1);
        StateHasChanged();

    }

    private void Modal_KillEvent(int event_id)
    {
        int i =  getEventArrID_byTaskID(event_id);

        if (i != int.MinValue)
        {
            EventsCollection.RemoveAt(i);
        }
        StateHasChanged();

    }

    private void Modal_SaveEvent(EventBody event_body)
    {
        int i =  getEventArrID_byTaskID(event_body.Event_ID);

        if (i != int.MinValue)
        {
            EventsCollection[i].Event_Color = event_body.Event_Color;
            EventsCollection[i].Event_Comment= event_body.Event_Comment;
            EventsCollection[i].Event_DateEnd = event_body.Event_DateEnd;
            EventsCollection[i].Event_DateStart = event_body.Event_DateStart;
            EventsCollection[i].Event_ForeColor = event_body.Event_ForeColor;
            EventsCollection[i].Event_Label = event_body.Event_Label;
            EventsCollection[i].Event_isAllDay = event_body.Event_isAllDay;
        }
        else
        {
            EventBody ev_new = new EventBody();
            ev_new.Event_Color = event_body.Event_Color;
            ev_new.Event_Comment= event_body.Event_Comment;
            ev_new.Event_DateEnd = event_body.Event_DateEnd;
            ev_new.Event_DateStart = event_body.Event_DateStart;
            ev_new.Event_ForeColor = event_body.Event_ForeColor;
            ev_new.Event_Label = event_body.Event_Label;
            ev_new.Event_isAllDay = event_body.Event_isAllDay;

            EventsCollection.Add(ev_new);
        }

        StateHasChanged();
    }

    private Task DateChanged(EventCallback<DateTime> date)
    {
        return Task.CompletedTask;
    }


}